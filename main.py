import streamlit as st
import time
import json
import redis
from app.tasks import run_research_crew
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="ü§ñ –§–µ—Ä–º–∞ –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
@st.cache_resource
def get_redis_client():
    return redis.Redis(host='redis', port=6379, decode_responses=True)

redis_client = get_redis_client()

st.title("ü§ñ –§–µ—Ä–º–∞ –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤")
st.subheader("–ù–∞ –±–∞–∑–µ CrewAI, Gemini 2.5 Flash –∏ Celery")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
with st.sidebar:
    st.header("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã")
    
    # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    queue_length = 0
    try:
        queue_length = redis_client.llen('celery')
    except:
        pass
    
    col1, col2 = st.columns(2)
    with col1:
        st.metric("–ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏", queue_length)
    with col2:
        st.metric("–°—Ç–∞—Ç—É—Å VPN", "üü¢ –ê–∫—Ç–∏–≤–µ–Ω")
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
    st.subheader("üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏")
    try:
        task_keys = redis_client.keys("celery-task-meta-*")
        if task_keys:
            for key in task_keys[-3:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
                task_id = key.replace("celery-task-meta-", "")
                task_info = redis_client.get(key)
                if task_info:
                    try:
                        task_data = json.loads(task_info)
                        status = task_data.get('status', 'UNKNOWN')
                        
                        if status == 'PENDING':
                            st.write(f"‚è≥ {task_id[:8]}... - –û–∂–∏–¥–∞–Ω–∏–µ")
                        elif status == 'STARTED':
                            st.write(f"üîÑ {task_id[:8]}... - –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
                        elif status == 'SUCCESS':
                            st.write(f"‚úÖ {task_id[:8]}... - –ó–∞–≤–µ—Ä—à–µ–Ω–æ")
                        elif status == 'FAILURE':
                            st.write(f"‚ùå {task_id[:8]}... - –û—à–∏–±–∫–∞")
                    except:
                        st.write(f"üìã {task_id[:8]}... - –í –ø—Ä–æ—Ü–µ—Å—Å–µ")
        else:
            st.write("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
    except:
        st.write("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis")

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
col1, col2 = st.columns([2, 1])

with col1:
    with st.form("research_form"):
        st.subheader("üöÄ –ó–∞–ø—É—Å–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
        
        topic = st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: '–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–µ–Ω–∞ –≤ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞—Ö'",
            help="–ò–ò-–∞–≥–µ–Ω—Ç—ã –ø—Ä–æ–≤–µ–¥—É—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ"
        )
        
        submitted = st.form_submit_button("üéØ –ù–∞—á–∞—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", use_container_width=True)

with col2:
    st.subheader("‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    st.info("""
    **1. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏**
    –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ—á–µ—Ä–µ–¥—å
    
    **2. –ê–≥–µ–Ω—Ç-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å**
    –ò—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
    
    **3. –ê–≥–µ–Ω—Ç-–ø–∏—Å–∞—Ç–µ–ª—å**
    –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
    
    **4. –ì–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç**
    –ü–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–∏–∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    """)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã
if submitted and topic:
    st.success(f"‚úÖ –ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞: **{topic}**")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ Celery
    with st.spinner("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å..."):
        task = run_research_crew.delay(topic)
        task_id = task.id
    
    st.info(f"üÜî ID –∑–∞–¥–∞—á–∏: `{task_id}`")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    status_container = st.empty()
    progress_container = st.empty()
    result_container = st.empty()
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    start_time = time.time()
    max_wait_time = 300  # 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –æ–∂–∏–¥–∞–Ω–∏—è
    
    while True:
        current_time = time.time()
        elapsed = current_time - start_time
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        try:
            task_info = redis_client.get(f"celery-task-meta-{task_id}")
            if task_info:
                task_data = json.loads(task_info)
                status = task_data.get('status', 'PENDING')
                result = task_data.get('result', None)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress_value = min(elapsed / 120.0, 0.95)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º ~2 –º–∏–Ω—É—Ç—ã –Ω–∞ –∑–∞–¥–∞—á—É
                progress_container.progress(progress_value, f"‚è±Ô∏è –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {int(elapsed)}—Å")
                
                if status == 'SUCCESS':
                    progress_container.progress(1.0, "‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                    status_container.success("üéâ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                    
                    if result:
                        result_container.markdown("### üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
                        result_container.markdown(result)
                    break
                    
                elif status == 'FAILURE':
                    progress_container.empty()
                    error_msg = task_data.get('traceback', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    status_container.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {error_msg}")
                    break
                    
                elif status == 'STARTED':
                    status_container.info("üîÑ –ê–≥–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º...")
                    
                else:  # PENDING
                    status_container.info("‚è≥ –ó–∞–¥–∞—á–∞ –≤ –æ—á–µ—Ä–µ–¥–∏, –æ–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
                    
        except Exception as e:
            status_container.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}")
        
        # –¢–∞–π–º–∞—É—Ç
        if elapsed > max_wait_time:
            status_container.warning("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ó–∞–¥–∞—á–∞ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ —Ñ–æ–Ω–µ.")
            break
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
        time.sleep(3)

# –°–µ–∫—Ü–∏—è —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
st.markdown("---")
st.subheader("üìö –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")

try:
    task_keys = redis_client.keys("celery-task-meta-*")
    if task_keys:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞)
        task_keys = sorted(task_keys, reverse=True)[:5]
        
        for key in task_keys:
            task_id = key.replace("celery-task-meta-", "")
            task_info = redis_client.get(key)
            
            if task_info:
                try:
                    task_data = json.loads(task_info)
                    status = task_data.get('status', 'UNKNOWN')
                    result = task_data.get('result', '')
                    
                    if status == 'SUCCESS' and result:
                        with st.expander(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id[:8]}... (–ó–∞–≤–µ—Ä—à–µ–Ω–æ)", expanded=False):
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º—É –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                            lines = result.split('\n')
                            title = lines[0] if lines else f"–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ {task_id[:8]}"
                            
                            st.markdown(f"**ID –∑–∞–¥–∞—á–∏:** `{task_id}`")
                            st.markdown(result[:2000] + ("..." if len(result) > 2000 else ""))
                            
                except json.JSONDecodeError:
                    continue
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ!")
        
except Exception as e:
    st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {str(e)}")

# –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
st.markdown("---")
col1, col2, col3 = st.columns(3)

with col1:
    st.markdown("""
    **üîß –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**
    - Gemini 2.5 Flash
    - CrewAI Agents  
    - VLESS VPN
    """)

with col2:
    st.markdown("""
    **‚ö° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
    - –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ–∏—Å–∫
    - –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
    """)

with col3:
    st.markdown("""
    **üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:**
    - –°—Ç–∞—Ç—É—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    - –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á
    - –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    """)
