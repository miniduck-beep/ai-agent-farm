#!/usr/bin/env python3
"""
AI Agent Farm - Integration Test Suite
=====================================
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
"""

import requests
import time
import sys

API_BASE = "http://localhost:8000"

def test_api_health():
    """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è API"""
    print("üè• –¢–µ—Å—Ç–∏—Ä—É–µ–º health endpoint...")
    try:
        response = requests.get(f"{API_BASE}/health", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API –∑–¥–æ—Ä–æ–≤: {data['status']}")
            return True
        else:
            print(f"‚ùå API –Ω–µ–∑–¥–æ—Ä–æ–≤: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False

def test_showcase_endpoints():
    """–¢–µ—Å—Ç showcase endpoints"""
    print("üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º showcase endpoints...")
    
    # –¢–µ—Å—Ç /showcase
    try:
        response = requests.get(f"{API_BASE}/showcase")
        if response.status_code == 200:
            data = response.json()
            teams = data.get("showcase_teams", {})
            print(f"‚úÖ Showcase teams –¥–æ—Å—Ç—É–ø–Ω—ã: {len(teams)} –∫–æ–º–∞–Ω–¥")
            return True
        else:
            print("‚ùå Showcase endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ showcase endpoint: {e}")
        return False

def test_crews_enhanced():
    """–¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ crews endpoint"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º enhanced crews endpoint...")
    
    try:
        response = requests.get(f"{API_BASE}/crews/enhanced")
        if response.status_code == 200:
            data = response.json()
            total = data.get("total_crews", 0)
            categories = data.get("categories", {})
            print(f"‚úÖ Enhanced crews: {total} –∫–æ–º–∞–Ω–¥ ({categories})")
            return True
        else:
            print("‚ùå Enhanced crews endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ enhanced crews: {e}")
        return False

def test_create_sample_research():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    print("üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è...")
    
    try:
        response = requests.post(f"{API_BASE}/research", json={
            "topic": "Integration test",
            "crew_type": "general",
            "language": "ru", 
            "depth": "basic"
        })
        
        if response.status_code == 200:
            data = response.json()
            task_id = data.get("task_id")
            print(f"‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {task_id}")
            return task_id
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {e}")
        return None

def test_task_status(task_id):
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
    if not task_id:
        return False
        
    print("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏...")
    
    try:
        response = requests.get(f"{API_BASE}/result/{task_id}")
        if response.status_code == 200:
            data = response.json()
            status = data.get("status", "UNKNOWN")
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {status}")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ AI Agent Farm - Integration Test Suite")
    print("=" * 50)
    
    tests = [
        test_api_health,
        test_showcase_endpoints, 
        test_crews_enhanced
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        print()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    task_id = test_create_sample_research()
    if task_id:
        passed += 1
        time.sleep(2)  # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
        if test_task_status(task_id):
            passed += 1
        total += 2
    else:
        total += 2
    
    print()
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        return 0
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º—É.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
