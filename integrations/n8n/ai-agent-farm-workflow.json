{
  "name": "AI Agent Farm Research Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/webhook/research",
        "responseMode": "onReceived",
        "options": {}
      },
      "id": "webhook-start",
      "name": "Research Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "ai-agent-farm-research"
    },
    {
      "parameters": {
        "url": "=http://YOUR_AI_FARM_HOST:8000/research",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={\n  \"topic\": \"{{ $json.topic }}\",\n  \"crew_type\": \"{{ $json.crew_type || 'business_analysis' }}\",\n  \"language\": \"{{ $json.language || 'ru' }}\",\n  \"depth\": \"{{ $json.depth || 'standard' }}\"\n}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "start-research",
      "name": "Start Research",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [460, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "ai-farm-api-key",
          "name": "AI Agent Farm API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract task_id from response\nconst response = $input.first().json;\nconst taskId = response.task_id;\n\n// Store task_id for later use\nreturn {\n  task_id: taskId,\n  status: response.status,\n  message: response.message,\n  original_request: $('Research Webhook').first().json\n};"
      },
      "id": "extract-task-id",
      "name": "Extract Task ID",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "amount": 30,
        "unit": "seconds"
      },
      "id": "wait-initial",
      "name": "Wait 30s",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "url": "=http://YOUR_AI_FARM_HOST:8000/result/{{ $json.task_id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {
          "timeout": 10000
        }
      },
      "id": "check-status",
      "name": "Check Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1120, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "ai-farm-api-key", 
          "name": "AI Agent Farm API"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "status-success",
              "leftValue": "={{ $json.status }}",
              "rightValue": "SUCCESS",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-completion",
      "name": "Check Completion",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "amount": 30,
        "unit": "seconds"
      },
      "id": "wait-retry",
      "name": "Wait & Retry",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [1340, 500]
    },
    {
      "parameters": {
        "jsCode": "// Format the research result for output\nconst result = $input.first().json;\n\nreturn {\n  status: 'completed',\n  task_id: result.task_id,\n  topic: result.result?.topic || 'N/A',\n  summary: result.result?.result || result.result,\n  processing_time: result.processing_time || 0,\n  completed_at: new Date().toISOString(),\n  // Original request context\n  original_request: $('Extract Task ID').first().json.original_request\n};"
      },
      "id": "format-result",
      "name": "Format Result",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 200]
    },
    {
      "parameters": {
        "chatId": "YOUR_TELEGRAM_CHAT_ID",
        "text": "=üéâ *AI Agent Farm Research Completed*\n\nüìã *Topic:* {{ $json.topic }}\n‚è±Ô∏è *Processing Time:* {{ $json.processing_time }}s\nüìÖ *Completed:* {{ $json.completed_at }}\n\nüìä *Summary:*\n{{ $json.summary }}\n\nüîó Task ID: `{{ $json.task_id }}`",
        "additionalFields": {
          "parse_mode": "Markdown"
        }
      },
      "id": "send-telegram",
      "name": "Send to Telegram",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [1780, 200],
      "credentials": {
        "telegramApi": {
          "id": "telegram-bot",
          "name": "Telegram Bot"
        }
      }
    },
    {
      "parameters": {
        "url": "YOUR_WEBHOOK_URL",
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={{ $json }}",
        "options": {
          "timeout": 10000
        }
      },
      "id": "webhook-result",
      "name": "Send Result Webhook",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1780, 320]
    }
  ],
  "pinData": {},
  "connections": {
    "Research Webhook": {
      "main": [
        [
          {
            "node": "Start Research",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start Research": {
      "main": [
        [
          {
            "node": "Extract Task ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Task ID": {
      "main": [
        [
          {
            "node": "Wait 30s",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 30s": {
      "main": [
        [
          {
            "node": "Check Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Status": {
      "main": [
        [
          {
            "node": "Check Completion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Completion": {
      "main": [
        [
          {
            "node": "Format Result",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait & Retry",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait & Retry": {
      "main": [
        [
          {
            "node": "Check Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Result": {
      "main": [
        [
          {
            "node": "Send to Telegram",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Result Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": false,
    "instanceId": "ai-agent-farm-template"
  },
  "id": "ai-agent-farm-research",
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "ai-research",
      "name": "AI Research"
    }
  ]
}
