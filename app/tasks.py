"""
AI Agent Farm - Celery Tasks
============================
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
"""

from celery import Celery
from app.config import settings
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=getattr(logging, settings.log_level))
logger = logging.getLogger(__name__)

# üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Celery –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
celery_app = Celery(
    'ai_agent_farm',
    broker=settings.celery_broker_url,
    backend=settings.celery_result_backend,
    include=['app.tasks']
)

# ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Celery
celery_app.conf.update(
    task_serializer='json',
    accept_content=['json'],
    result_serializer='json',
    timezone='UTC',
    enable_utc=True,
    task_time_limit=settings.celery_task_timeout,
    task_soft_time_limit=settings.celery_task_timeout - 300,  # 5 –º–∏–Ω—É—Ç –¥–æ –∂–µ—Å—Ç–∫–æ–≥–æ –ª–∏–º–∏—Ç–∞
    worker_prefetch_multiplier=1,
    task_acks_late=True,
    worker_max_tasks_per_child=1000,
)

@celery_app.task(bind=True)
def research_task(self, topic: str, **kwargs):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    
    Args:
        topic: –¢–µ–º–∞ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (language, depth, etc.)
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    """
    try:
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: {topic}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        self.update_state(state='PROGRESS', meta={'current': 10, 'total': 100, 'status': '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤...'})
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å circular imports
        from app.main_crew import run_research
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        self.update_state(state='PROGRESS', meta={'current': 25, 'total': 100, 'status': '–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...'})
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        result = run_research(topic, **kwargs)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å 
        self.update_state(state='PROGRESS', meta={'current': 90, 'total': 100, 'status': '–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...'})
        
        logger.info(f"‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {topic}")
        
        return {
            'status': 'completed',
            'result': result,
            'topic': topic,
            'message': '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ'
        }
        
    except Exception as exc:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ {topic}: {str(exc)}")
        
        self.update_state(
            state='FAILURE',
            meta={'current': 100, 'total': 100, 'status': f'–û—à–∏–±–∫–∞: {str(exc)}'}
        )
        
        raise exc

@celery_app.task
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Celery worker"""
    return {'status': 'healthy', 'message': 'Celery worker is running'}

if __name__ == '__main__':
    celery_app.start()
