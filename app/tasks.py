from celery import Celery
from app.main_crew import create_research_crew
import redis
import json
from datetime import datetime

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Celery —Å backend –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
celery_app = Celery(
    'tasks',
    broker='redis://redis:6379/0',
    backend='redis://redis:6379/0'  # –í–ê–ñ–ù–û: Backend –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
redis_client = redis.Redis(host='redis', port=6379, decode_responses=True)

def update_task_status(task_id, status, message, progress=None):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –≤ Redis –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        status_data = {
            'status': status,
            'message': message,
            'timestamp': datetime.now().isoformat(),
            'progress': progress
        }
        redis_client.setex(f'task-status-{task_id}', 3600, json.dumps(status_data))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

@celery_app.task(bind=True, name="run_research_crew")
def run_research_crew(self, topic):
    """
    –ì–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ Celery –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –∞–≥–µ–Ω—Ç–æ–≤.
    
    Args:
        topic (str): –¢–µ–º–∞ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    
    Returns:
        str: –ì–æ—Ç–æ–≤—ã–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
    """
    task_id = self.request.id
    
    try:
        print(f"üöÄ [–ó–ê–î–ê–ß–ê] Celery worker –ø–æ–ª—É—á–∏–ª –∑–∞–¥–∞—á—É: –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Ç–µ–º—É '{topic}'")
        print(f"üÜî [–ó–ê–î–ê–ß–ê] ID: {task_id}")
        
        # –°—Ç–∞—Ç—É—Å 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (5%)
        update_task_status(task_id, 'INITIALIZING', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤...', 5)
        self.update_state(
            state='PROGRESS', 
            meta={'status': '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤...', 'current': 5, 'total': 100}
        )
        
        # –°—Ç–∞—Ç—É—Å 2: –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–æ–≤ (10%)
        update_task_status(task_id, 'STARTING', '–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤...', 10)
        self.update_state(
            state='PROGRESS', 
            meta={'status': '–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤...', 'current': 10, 'total': 100}
        )
        
        # –°—Ç–∞—Ç—É—Å 3: –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (30%)
        update_task_status(task_id, 'RESEARCHING', '–ê–≥–µ–Ω—Ç-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ...', 30)
        self.update_state(
            state='PROGRESS', 
            meta={'status': '–ü–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...', 'current': 30, 'total': 100}
        )
        
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã –∞–≥–µ–Ω—Ç–æ–≤
        print(f"üéØ [–ó–ê–î–ê–ß–ê] –ó–∞–ø—É—Å–∫ create_research_crew –¥–ª—è —Ç–µ–º—ã: '{topic}'")
        result = create_research_crew(topic)
        
        # –°—Ç–∞—Ç—É—Å 4: –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è (95%)
        update_task_status(task_id, 'FINALIZING', '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞...', 95)
        self.update_state(
            state='PROGRESS', 
            meta={'status': '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è...', 'current': 95, 'total': 100}
        )
        
        # –°—Ç–∞—Ç—É—Å 5: –ó–∞–≤–µ—Ä—à–µ–Ω–æ (100%)
        update_task_status(task_id, 'COMPLETED', '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!', 100)
        
        print(f"‚úÖ [–ó–ê–î–ê–ß–ê] Celery worker –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–¥–∞—á—É –ø–æ —Ç–µ–º–µ '{topic}'")
        print(f"üìÑ [–†–ï–ó–£–õ–¨–¢–ê–¢] –î–ª–∏–Ω–∞ –æ—Ç—á–µ—Ç–∞: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ Redis backend)
        return result
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {str(e)}"
        print(f"‚ùå [–ó–ê–î–ê–ß–ê] {error_msg}")
        
        # –°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞
        update_task_status(task_id, 'ERROR', error_msg, 0)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ Celery
        self.update_state(
            state='FAILURE',
            meta={'status': error_msg, 'current': 0, 'total': 100, 'error': str(e)}
        )
        
        # –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ Celery
        raise e

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Celery
celery_app.conf.update(
    task_serializer='json',
    accept_content=['json'],  # Ignore other content
    result_serializer='json',
    timezone='UTC',
    enable_utc=True,
    result_expires=3600,  # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ö—Ä–∞–Ω—è—Ç—Å—è 1 —á–∞—Å
)
