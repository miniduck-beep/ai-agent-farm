"""
AI Agent Farm - Enhanced Celery Tasks
====================================
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∞–≥–µ–Ω—Ç–æ–≤
"""

from celery import Celery
from app.config import settings
import logging
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=getattr(logging, settings.log_level))
logger = logging.getLogger(__name__)

# üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Celery –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
celery_app = Celery(
    'ai_agent_farm',
    broker=settings.celery_broker_url,
    backend=settings.celery_result_backend,
    include=['app.tasks']
)

# ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Celery
celery_app.conf.update(
    task_serializer='json',
    accept_content=['json'],
    result_serializer='json',
    timezone='UTC',
    enable_utc=True,
    task_time_limit=settings.celery_task_timeout,
    task_soft_time_limit=settings.celery_task_timeout - 300,  # 5 –º–∏–Ω—É—Ç –¥–æ –∂–µ—Å—Ç–∫–æ–≥–æ –ª–∏–º–∏—Ç–∞
    worker_prefetch_multiplier=1,
    task_acks_late=True,
    worker_max_tasks_per_child=1000,
)

@celery_app.task(bind=True)
def research_task(self, topic: str, crew_type: str = "general", language: str = "ru", depth: str = "standard"):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –∞–≥–µ–Ω—Ç–æ–≤
    
    Args:
        topic: –¢–µ–º–∞ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        crew_type: –¢–∏–ø –∫–æ–º–∞–Ω–¥—ã –∞–≥–µ–Ω—Ç–æ–≤
        language: –Ø–∑—ã–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        depth: –ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    """
    start_time = time.time()
    
    try:
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: {topic} (–∫–æ–º–∞–Ω–¥–∞: {crew_type}, —è–∑—ã–∫: {language}, –≥–ª—É–±–∏–Ω–∞: {depth})")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        self.update_state(
            state='PROGRESS', 
            meta={
                'current': 10, 
                'total': 100, 
                'status': f'–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã {crew_type}...',
                'crew_type': crew_type
            }
        )
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å circular imports
        from app.main_crew import run_research
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        self.update_state(
            state='PROGRESS', 
            meta={
                'current': 25, 
                'total': 100, 
                'status': '–ü–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...',
                'crew_type': crew_type
            }
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
        result = run_research(
            topic=topic,
            crew_type=crew_type, 
            language=language,
            depth=depth
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å 
        self.update_state(
            state='PROGRESS', 
            meta={
                'current': 90, 
                'total': 100, 
                'status': '–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...',
                'crew_type': crew_type
            }
        )
        
        processing_time = time.time() - start_time
        
        logger.info(f"‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {topic} ({processing_time:.2f}s)")
        
        return {
            'status': 'completed',
            'result': result,
            'topic': topic,
            'crew_type': crew_type,
            'language': language,
            'depth': depth,
            'processing_time': processing_time,
            'message': f'–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π {crew_type}'
        }
        
    except Exception as exc:
        processing_time = time.time() - start_time
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ {topic}: {str(exc)}")
        
        self.update_state(
            state='FAILURE',
            meta={
                'current': 100, 
                'total': 100, 
                'status': f'–û—à–∏–±–∫–∞: {str(exc)}',
                'processing_time': processing_time,
                'crew_type': crew_type
            }
        )
        
        raise exc

@celery_app.task
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Celery worker"""
    return {
        'status': 'healthy', 
        'message': 'Celery worker is running',
        'timestamp': time.time()
    }

if __name__ == '__main__':
    celery_app.start()
