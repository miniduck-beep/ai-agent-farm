"""
AI Agent Farm - Enhanced Web Interface
=====================================
Comprehensive –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π showcase –∫–æ–º–∞–Ω–¥
"""

import streamlit as st
import requests
import time
import json
from datetime import datetime
import pandas as pd

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:8000"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="ü§ñ AI Agent Farm - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –§–µ—Ä–º–∞ AI –ê–≥–µ–Ω—Ç–æ–≤",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS —Å—Ç–∏–ª–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ UI
st.markdown("""
<style>
    .main-header {
        padding: 1rem 0;
        border-bottom: 2px solid #f0f2f6;
        margin-bottom: 2rem;
    }
    .showcase-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
    }
    .standard-card {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
    }
    .result-container {
        background: #f8f9fa;
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 4px solid #28a745;
        margin: 1rem 0;
    }
    .metrics-container {
        background: #e3f2fd;
        padding: 1rem;
        border-radius: 8px;
        margin: 0.5rem 0;
    }
</style>
""", unsafe_allow_html=True)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown('<div class="main-header">', unsafe_allow_html=True)
    st.title("ü§ñ AI Agent Farm")
    st.markdown("**–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –§–µ—Ä–º–∞ AI –ê–≥–µ–Ω—Ç–æ–≤** - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä")
    st.markdown('</div>', unsafe_allow_html=True)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    with st.sidebar:
        st.header("üéØ –ù–∞–≤–∏–≥–∞—Ü–∏—è")
        page = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            [
                "üè† –ì–ª–∞–≤–Ω–∞—è",
                "üéØ Showcase –ö–æ–º–∞–Ω–¥—ã", 
                "üîç –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
                "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –°–∏—Å—Ç–µ–º—ã",
                "‚ùì –°–ø—Ä–∞–≤–∫–∞"
            ]
        )
    
    # –†–æ—É—Ç–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü
    if page == "üè† –ì–ª–∞–≤–Ω–∞—è":
        show_home_page()
    elif page == "üéØ Showcase –ö–æ–º–∞–Ω–¥—ã":
        show_showcase_page()
    elif page == "üîç –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è":
        show_standard_research_page()
    elif page == "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –°–∏—Å—Ç–µ–º—ã":
        show_monitoring_page()
    elif page == "‚ùì –°–ø—Ä–∞–≤–∫–∞":
        show_help_page()

def show_home_page():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ–±–∑–æ—Ä–æ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.header("üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Agent Farm!")
        
        st.markdown("""
        ### üåü –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        
        **üéØ Showcase –ö–æ–º–∞–Ω–¥—ã** - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:
        - üíº **SWOT-–ê–Ω–∞–ª–∏—Ç–∏–∫** - Comprehensive –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–∞–Ω–∏–π
        - üî¨ **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –†–µ—Ü–µ–Ω–∑–µ–Ω—Ç** - –ê–Ω–∞–ª–∏–∑ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤  
        - üí∞ **–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –°–æ–≤–µ—Ç–Ω–∏–∫** - –ê–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–π –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
        
        **üîç –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ö–æ–º–∞–Ω–¥—ã** - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:
        - –ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ ‚Ä¢ SEO –∫–æ–Ω—Ç–µ–Ω—Ç ‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ ‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        """)
        
        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        st.markdown("### ‚ö° –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç")
        
        col_a, col_b, col_c = st.columns(3)
        
        with col_a:
            if st.button("üíº SWOT –ê–Ω–∞–ª–∏–∑", help="–ê–Ω–∞–ª–∏–∑ —Å–∏–ª—å–Ω—ã—Ö –∏ —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω –∫–æ–º–ø–∞–Ω–∏–∏"):
                st.session_state.page = "showcase"
                st.session_state.selected_crew = "swot_analysis"
                st.rerun()
        
        with col_b:
            if st.button("üî¨ Code Review", help="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ—Ü–µ–Ω–∑–∏—è –∫–æ–¥–∞"):
                st.session_state.page = "showcase"
                st.session_state.selected_crew = "tech_review"
                st.rerun()
        
        with col_c:
            if st.button("üí∞ –ê–∫—Ü–∏–∏", help="–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑"):
                st.session_state.page = "showcase"
                st.session_state.selected_crew = "investment_advisor"
                st.rerun()
    
    with col2:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        try:
            health_response = requests.get(f"{API_BASE_URL}/health", timeout=5)
            if health_response.status_code == 200:
                health_data = health_response.json()
                
                st.success("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                st.metric("–í–µ—Ä—Å–∏—è", health_data.get("version", "Unknown"))
                
                # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
                components = health_data.get("components", {})
                for comp, status in components.items():
                    if status == "healthy":
                        st.success(f"‚úÖ {comp.title()}")
                    else:
                        st.error(f"‚ùå {comp.title()}")
            else:
                st.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except:
            st.error("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
        st.header("üì∞ –ù–æ–≤–æ—Å—Ç–∏")
        st.info("üéâ –ù–æ–≤—ã–µ Showcase –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã!")
        st.info("üìä –î–æ–±–∞–≤–ª–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã")
        st.info("üöÄ –£–ª—É—á—à–µ–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")

def show_showcase_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ showcase –∫–æ–º–∞–Ω–¥"""
    
    st.header("üéØ Showcase –ö–æ–º–∞–Ω–¥—ã")
    st.markdown("**–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á**")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ showcase –∫–æ–º–∞–Ω–¥–∞—Ö
    try:
        response = requests.get(f"{API_BASE_URL}/showcase")
        if response.status_code == 200:
            showcase_data = response.json()
            teams = showcase_data["showcase_teams"]
            
            # –í—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã
            team_options = {
                "swot_analysis": "üíº SWOT-–ê–Ω–∞–ª–∏—Ç–∏–∫",
                "tech_review": "üî¨ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –†–µ—Ü–µ–Ω–∑–µ–Ω—Ç", 
                "investment_advisor": "üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –°–æ–≤–µ—Ç–Ω–∏–∫"
            }
            
            selected_team = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ showcase –∫–æ–º–∞–Ω–¥—É:",
                options=list(team_options.keys()),
                format_func=lambda x: team_options[x],
                index=0
            )
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
            team_info = teams[selected_team]
            
            # –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–æ–º–∞–Ω–¥—ã
            st.markdown(f'''
            <div class="showcase-card">
                <h3>{team_info["name"]}</h3>
                <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {team_info["description"]}</p>
                <p><strong>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</strong> {team_info["estimated_time"]}</p>
                <p><strong>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:</strong> {", ".join(team_info["use_cases"])}</p>
            </div>
            ''', unsafe_allow_html=True)
            
            # –§–æ—Ä–º–∞ –∑–∞–ø—É—Å–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            with st.form(f"showcase_form_{selected_team}"):
                st.subheader("üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
                
                # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
                if selected_team == "swot_analysis":
                    topic = st.text_input(
                        "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:",
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Apple, Tesla, Microsoft",
                        help="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è SWOT-–∞–Ω–∞–ª–∏–∑–∞"
                    )
                    
                elif selected_team == "tech_review":
                    topic = st.text_input(
                        "–°—Å—ã–ª–∫–∞ –Ω–∞ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:",
                        placeholder="https://github.com/user/repository",
                        help="–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                    )
                    
                elif selected_team == "investment_advisor":
                    topic = st.text_input(
                        "–¢–∏–∫–µ—Ä –∞–∫—Ü–∏–∏:",
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: AAPL, TSLA, MSFT",
                        help="–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
                    ).upper()
                
                # –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                col1, col2 = st.columns(2)
                
                with col1:
                    language = st.selectbox(
                        "–Ø–∑—ã–∫ –∞–Ω–∞–ª–∏–∑–∞:",
                        ["ru", "en"],
                        format_func=lambda x: "üá∑üá∫ –†—É—Å—Å–∫–∏–π" if x == "ru" else "üá∫üá∏ English"
                    )
                
                with col2:
                    depth = st.selectbox(
                        "–ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞:",
                        ["basic", "standard", "comprehensive"],
                        index=2,
                        format_func=lambda x: {
                            "basic": "üîç –ë–∞–∑–æ–≤—ã–π", 
                            "standard": "üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π",
                            "comprehensive": "üéØ –ò—Å—á–µ—Ä–ø—ã–≤–∞—é—â–∏–π"
                        }[x]
                    )
                
                # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
                submitted = st.form_submit_button(
                    f"üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å {team_info['name']}",
                    type="primary"
                )
                
                if submitted:
                    if not topic:
                        st.error("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞")
                    else:
                        start_showcase_research(selected_team, topic, language, depth, team_info)
        
        else:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ showcase –∫–æ–º–∞–Ω–¥–∞—Ö")
            
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {str(e)}")

def start_showcase_research(crew_type, topic, language, depth, team_info):
    """–ó–∞–ø—É—Å–∫ showcase –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    
    with st.spinner(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º {team_info['name']}..."):
        try:
            response = requests.post(
                f"{API_BASE_URL}/research/showcase",
                json={
                    "topic": topic,
                    "crew_type": crew_type,
                    "language": language,
                    "depth": depth
                }
            )
            
            if response.status_code == 200:
                data = response.json()
                task_id = data["task_id"]
                
                st.success(f"‚úÖ {team_info['name']} –∑–∞–ø—É—â–µ–Ω!")
                st.info(f"üÜî ID –∑–∞–¥–∞—á–∏: {task_id}")
                st.info(f"‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {data['estimated_time']}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                if "active_tasks" not in st.session_state:
                    st.session_state.active_tasks = []
                
                st.session_state.active_tasks.append({
                    "task_id": task_id,
                    "crew_type": crew_type,
                    "team_name": team_info['name'],
                    "topic": topic,
                    "started_at": datetime.now(),
                    "estimated_time": data['estimated_time']
                })
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                monitor_task_progress(task_id, team_info['name'])
                
            else:
                error_data = response.json()
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {error_data.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def monitor_task_progress(task_id, team_name):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    
    st.subheader("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    
    progress_bar = st.progress(0)
    status_placeholder = st.empty()
    result_placeholder = st.empty()
    
    start_time = time.time()
    
    while True:
        try:
            response = requests.get(f"{API_BASE_URL}/result/{task_id}")
            
            if response.status_code == 200:
                data = response.json()
                status = data["status"]
                progress = data.get("progress", 0)
                
                progress_bar.progress(progress / 100)
                
                elapsed_time = int(time.time() - start_time)
                status_placeholder.info(f"üîÑ –°—Ç–∞—Ç—É—Å: {status} | –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed_time}—Å")
                
                if status == "SUCCESS":
                    st.success(f"üéâ {team_name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    result = data.get("result", "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    
                    with result_placeholder.container():
                        st.markdown('<div class="result-container">', unsafe_allow_html=True)
                        st.subheader("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞")
                        st.markdown(result)
                        st.markdown('</div>', unsafe_allow_html=True)
                        
                        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            if st.button("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"):
                                st.download_button(
                                    label="üìÑ –°–∫–∞—á–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç",
                                    data=result,
                                    file_name=f"{team_name}_{task_id}.txt",
                                    mime="text/plain"
                                )
                        with col2:
                            if st.button("üîÑ –ù–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"):
                                st.rerun()
                        with col3:
                            if st.button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"):
                                show_task_statistics(data)
                    
                    break
                    
                elif status == "FAILURE":
                    st.error(f"‚ùå {team_name} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π")
                    error_info = data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    st.error(f"–û—à–∏–±–∫–∞: {error_info}")
                    break
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                time.sleep(10)
                
            else:
                st.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏")
                break
                
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}")
            break

def show_task_statistics(task_data):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á–∏")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–°—Ç–∞—Ç—É—Å", task_data.get("status", "N/A"))
    with col2:
        st.metric("–ü—Ä–æ–≥—Ä–µ—Å—Å", f"{task_data.get('progress', 0)}%")
    with col3:
        processing_time = task_data.get("processing_time", 0)
        st.metric("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", f"{processing_time:.1f}—Å")

def show_standard_research_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π"""
    
    st.header("üîç –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
    st.markdown("**–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á**")
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    standard_crews = {
        "general": {
            "name": "üîç –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
            "description": "Comprehensive –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ª—é–±—ã—Ö —Ç–µ–º"
        },
        "business_analysis": {
            "name": "üíº –ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
            "description": "–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–æ–≤ –∏ –±–∏–∑–Ω–µ—Å-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"
        },
        "seo_content": {
            "name": "üìù SEO –∫–æ–Ω—Ç–µ–Ω—Ç", 
            "description": "–°–æ–∑–¥–∞–Ω–∏–µ SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
        },
        "tech_research": {
            "name": "üî¨ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ",
            "description": "–ì–ª—É–±–æ–∫–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"
        },
        "financial_analysis": {
            "name": "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑",
            "description": "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤"
        }
    }
    
    selected_crew = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:",
        options=list(standard_crews.keys()),
        format_func=lambda x: standard_crews[x]["name"]
    )
    
    crew_info = standard_crews[selected_crew]
    
    # –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–æ–º–∞–Ω–¥—ã
    st.markdown(f'''
    <div class="standard-card">
        <h3>{crew_info["name"]}</h3>
        <p>{crew_info["description"]}</p>
    </div>
    ''', unsafe_allow_html=True)
    
    # –§–æ—Ä–º–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    with st.form("standard_research_form"):
        topic = st.text_area(
            "–¢–µ–º–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:",
            placeholder="–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å...",
            height=100
        )
        
        col1, col2 = st.columns(2)
        
        with col1:
            language = st.selectbox("–Ø–∑—ã–∫:", ["ru", "en"])
        with col2:
            depth = st.selectbox("–ì–ª—É–±–∏–Ω–∞:", ["basic", "standard", "comprehensive"])
        
        submitted = st.form_submit_button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ")
        
        if submitted:
            if not topic:
                st.error("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
            else:
                start_standard_research(selected_crew, topic, language, depth)

def start_standard_research(crew_type, topic, language, depth):
    """–ó–∞–ø—É—Å–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    
    with st.spinner("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ..."):
        try:
            response = requests.post(
                f"{API_BASE_URL}/research",
                json={
                    "topic": topic,
                    "crew_type": crew_type,
                    "language": language,
                    "depth": depth
                }
            )
            
            if response.status_code == 200:
                data = response.json()
                task_id = data["task_id"]
                
                st.success("‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
                st.info(f"üÜî ID –∑–∞–¥–∞—á–∏: {task_id}")
                
                # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                monitor_task_progress(task_id, f"–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ ({crew_type})")
                
            else:
                st.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
                
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def show_monitoring_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã"""
    
    st.header("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –°–∏—Å—Ç–µ–º—ã")
    
    # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üè• –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã")
        
        try:
            health_response = requests.get(f"{API_BASE_URL}/health")
            if health_response.status_code == 200:
                health_data = health_response.json()
                
                st.success("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
                
                # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                components = health_data.get("components", {})
                for comp, status in components.items():
                    if status == "healthy":
                        st.success(f"‚úÖ {comp.title()}: {status}")
                    else:
                        st.error(f"‚ùå {comp.title()}: {status}")
            else:
                st.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except:
            st.error("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∏—Å—Ç–µ–º–µ")
    
    with col2:
        st.subheader("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏")
        
        try:
            tasks_response = requests.get(f"{API_BASE_URL}/tasks")
            if tasks_response.status_code == 200:
                tasks_data = tasks_response.json()
                
                total_active = tasks_data.get("total_active", 0)
                st.metric("–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á", total_active)
                
                if total_active > 0:
                    st.info(f"–í —Å–∏—Å—Ç–µ–º–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è {total_active} –∑–∞–¥–∞—á(–∏)")
                else:
                    st.success("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
            else:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–∞—Ö")
        except:
            st.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–¥–∞—á–∞—Ö")
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ —Å–µ—Å—Å–∏–∏
    if "active_tasks" in st.session_state and st.session_state.active_tasks:
        st.subheader("üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏")
        
        for task in st.session_state.active_tasks:
            with st.expander(f"{task['team_name']} - {task['topic'][:50]}..."):
                st.write(f"üÜî ID: {task['task_id']}")
                st.write(f"‚è∞ –ó–∞–ø—É—â–µ–Ω–æ: {task['started_at'].strftime('%H:%M:%S')}")
                st.write(f"‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {task['estimated_time']}")
                
                if st.button(f"üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", key=task['task_id']):
                    check_task_status(task['task_id'])

def check_task_status(task_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
    
    try:
        response = requests.get(f"{API_BASE_URL}/result/{task_id}")
        if response.status_code == 200:
            data = response.json()
            status = data["status"]
            progress = data.get("progress", 0)
            
            if status == "SUCCESS":
                st.success(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! (–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%)")
            elif status == "FAILURE":
                st.error(f"‚ùå –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            else:
                st.info(f"üîÑ –ó–∞–¥–∞—á–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%)")
        else:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏")
    except:
        st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞")

def show_help_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø—Ä–∞–≤–∫–∏"""
    
    st.header("‚ùì –°–ø—Ä–∞–≤–∫–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    
    st.markdown("""
    ## üéØ Showcase –ö–æ–º–∞–Ω–¥—ã
    
    ### üíº SWOT-–ê–Ω–∞–ª–∏—Ç–∏–∫
    **–ß—Ç–æ –¥–µ–ª–∞–µ—Ç:** –ü—Ä–æ–≤–æ–¥–∏—Ç comprehensive SWOT-–∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–∞–Ω–∏–π
    **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:** –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Apple, Tesla)
    **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏–ª—å–Ω—ã—Ö/—Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    
    ### üî¨ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –†–µ—Ü–µ–Ω–∑–µ–Ω—Ç  
    **–ß—Ç–æ –¥–µ–ª–∞–µ—Ç:** –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
    **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:** –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ—Ü–µ–Ω–∑–∏—è —Å –æ—Ü–µ–Ω–∫–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    
    ### üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –°–æ–≤–µ—Ç–Ω–∏–∫
    **–ß—Ç–æ –¥–µ–ª–∞–µ—Ç:** –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–∫—Ü–∏–∏ –∏ –¥–∞–µ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏  
    **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:** –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: AAPL, MSFT)
    **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ä–∏—Å–∫–æ–≤
    
    ## üîç –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ö–æ–º–∞–Ω–¥—ã
    
    - **–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è** - –¥–ª—è –ª—é–±—ã—Ö —Ç–µ–º
    - **–ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞** - –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–æ–≤ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    - **SEO –∫–æ–Ω—Ç–µ–Ω—Ç** - —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    - **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ** - –≥–ª—É–±–æ–∫–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    - **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑** - —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    
    ## üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞
    
    –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:
    1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
    2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8000
    3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    
    ## üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    
    - [GitHub Repository](https://github.com/miniduck-beep/ai-agent-farm)
    - [API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è](http://localhost:8000/docs)
    - [Grafana Dashboard](http://localhost:3000)
    """)

if __name__ == "__main__":
    main()
