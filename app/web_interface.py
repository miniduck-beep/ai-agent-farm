"""
AI Agent Farm - Web Interface
============================
MVP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Ä—Ç–∞–ª –Ω–∞ Streamlit
"""

import streamlit as st
import requests
import json
import time
from datetime import datetime
from typing import Optional, Dict, Any
import asyncio
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="AI Agent Farm",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
API_BASE_URL = "http://localhost:8000"  # –ú–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

class AIAgentFarmClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å AI Agent Farm API"""
    
    def __init__(self, base_url: str = API_BASE_URL):
        self.base_url = base_url
        
    def start_research(self, topic: str, crew_type: str = "business_analysis", 
                      language: str = "ru", depth: str = "standard") -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"""
        try:
            response = requests.post(
                f"{self.base_url}/research",
                json={
                    "topic": topic,
                    "crew_type": crew_type,
                    "language": language,
                    "depth": depth
                },
                timeout=30
            )
            response.raise_for_status()
            return response.json()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {str(e)}")
            return {"error": str(e)}
    
    def get_result(self, task_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
        try:
            response = requests.get(f"{self.base_url}/result/{task_id}", timeout=10)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            return {"error": str(e)}
    
    def get_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            response = requests.get(f"{self.base_url}/health", timeout=5)
            response.raise_for_status()
            return response.json()
        except:
            return {"status": "unhealthy"}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    client = AIAgentFarmClient()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("ü§ñ AI Agent Farm")
    st.subheader("–ú–æ—â–Ω–∞—è –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
    with st.spinner("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã..."):
        health = client.get_health()
    
    if health.get("status") == "unhealthy":
        st.error("‚ö†Ô∏è AI Agent Farm –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞.")
        st.code(f"docker compose up -d", language="bash")
        return
    else:
        st.success("‚úÖ AI Agent Farm –æ–Ω–ª–∞–π–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –°–∞–π–¥–±–∞—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
        
        # –¢–∏–ø –∫–æ–º–∞–Ω–¥—ã –∞–≥–µ–Ω—Ç–æ–≤
        crew_type = st.selectbox(
            "–ö–æ–º–∞–Ω–¥–∞ –∞–≥–µ–Ω—Ç–æ–≤",
            ["business_analysis", "seo_content", "tech_research", "financial_analysis"],
            help="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏"
        )
        
        crew_descriptions = {
            "business_analysis": "üíº –ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞",
            "seo_content": "üìù SEO –∏ –∫–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏",
            "tech_research": "üî¨ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", 
            "financial_analysis": "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑"
        }
        
        st.info(crew_descriptions.get(crew_type, "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"))
        
        # –Ø–∑—ã–∫ –æ—Ç—á–µ—Ç–∞
        language = st.selectbox("–Ø–∑—ã–∫ –æ—Ç—á–µ—Ç–∞", ["ru", "en"], index=0)
        
        # –ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞
        depth = st.selectbox(
            "–ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞",
            ["basic", "standard", "comprehensive"],
            index=1,
            help="basic: –±—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä, standard: –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑, comprehensive: –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–µ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"
        )
        
        st.markdown("---")
        st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        if health.get("status") == "healthy":
            st.metric("–°—Ç–∞—Ç—É—Å", "üü¢ –û–Ω–ª–∞–π–Ω")
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –º–µ—Ç—Ä–∏–∫ –∏–∑ health endpoint
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.header("üöÄ –ó–∞–ø—É—Å–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
        
        # –ü–æ–ª–µ –¥–ª—è —Ç–µ–º—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        topic = st.text_area(
            "–¢–µ–º–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π –≤ –†–æ—Å—Å–∏–∏\n‚Ä¢ SEO —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è IT-—Å—Ç–∞—Ä—Ç–∞–ø–∞\n‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–¥—ã –≤ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏",
            height=100,
            help="–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å. –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
        )
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
        if st.button("üîç –ù–∞—á–∞—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", type="primary", disabled=not topic.strip()):
            if topic.strip():
                with st.spinner("–ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ..."):
                    result = client.start_research(topic, crew_type, language, depth)
                
                if "error" not in result:
                    st.session_state.task_id = result.get("task_id")
                    st.session_state.start_time = datetime.now()
                    st.success(f"‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ! Task ID: `{result.get('task_id')}`")
                    st.info("–ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 3-10 –º–∏–Ω—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ç–µ–º—ã.")
                    st.rerun()
    
    with col2:
        st.header("üí° –ü—Ä–∏–º–µ—Ä—ã —Ç–µ–º")
        
        example_topics = [
            "–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –Ω–∞ —Ä—ã–Ω–∫–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã",
            "SEO —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞",
            "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–¥—ã –≤ –±–ª–æ–∫—á–µ–π–Ω–µ", 
            "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å IT-—Å–µ–∫—Ç–æ—Ä–∞"
        ]
        
        for i, example in enumerate(example_topics):
            if st.button(f"üìã {example}", key=f"example_{i}"):
                st.session_state.selected_topic = example
                st.rerun()
        
        if hasattr(st.session_state, 'selected_topic'):
            st.text_area("", value=st.session_state.selected_topic, key="topic_from_example")
    
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if hasattr(st.session_state, 'task_id') and st.session_state.task_id:
        st.markdown("---")
        st.header("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        status_container = st.container()
        result_container = st.container()
        
        # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        placeholder = st.empty()
        
        with placeholder:
            with st.spinner("–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è..."):
                status_result = client.get_result(st.session_state.task_id)
        
        if "error" not in status_result:
            status = status_result.get("status", "UNKNOWN")
            progress = status_result.get("progress", 0)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            with status_container:
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("–°—Ç–∞—Ç—É—Å", status)
                
                with col2:
                    elapsed = datetime.now() - st.session_state.start_time
                    st.metric("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", f"{elapsed.seconds}s")
                
                with col3:
                    st.metric("–ü—Ä–æ–≥—Ä–µ—Å—Å", f"{progress}%")
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                st.progress(progress / 100)
                
                # –°—Ç–∞—Ç—É—Å-—Å–æ–æ–±—â–µ–Ω–∏—è
                status_messages = {
                    "PENDING": "‚è≥ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏...",
                    "PROCESSING": "üîÑ –ê–≥–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º...", 
                    "SUCCESS": "‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!",
                    "FAILURE": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"
                }
                
                st.info(status_messages.get(status, f"–°—Ç–∞—Ç—É—Å: {status}"))
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if status == "SUCCESS":
                with result_container:
                    st.header("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
                    
                    research_result = status_result.get("result", {})
                    
                    if isinstance(research_result, dict):
                        result_text = research_result.get("result", "")
                    else:
                        result_text = str(research_result)
                    
                    # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    st.markdown(result_text)
                    
                    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    with st.expander("üìä –î–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"):
                        col1, col2 = st.columns(2)
                        with col1:
                            st.json({
                                "task_id": st.session_state.task_id,
                                "processing_time": status_result.get("processing_time", 0),
                                "crew_type": crew_type,
                                "language": language,
                                "depth": depth
                            })
                        
                        with col2:
                            st.download_button(
                                "üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", 
                                data=result_text,
                                file_name=f"research_{st.session_state.task_id}.md",
                                mime="text/markdown"
                            )
                    
                    # –û–ø—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
                    if st.button("üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"):
                        if 'task_id' in st.session_state:
                            del st.session_state.task_id
                        if 'start_time' in st.session_state:
                            del st.session_state.start_time
                        st.rerun()
            
            elif status in ["PENDING", "PROCESSING"]:
                # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                time.sleep(10)
                st.rerun()
            
            elif status == "FAILURE":
                st.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
                error_msg = status_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                st.code(error_msg)
                
                if st.button("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"):
                    if 'task_id' in st.session_state:
                        del st.session_state.task_id
                    st.rerun()
        
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"):
                st.rerun()
    
    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.markdown(
        """
        <div style='text-align: center'>
            <p>ü§ñ Powered by AI Agent Farm | 
            <a href='https://github.com/miniduck-beep/ai-agent-farm'>GitHub</a> | 
            <a href='http://localhost:8000/docs'>API Docs</a></p>
        </div>
        """, 
        unsafe_allow_html=True
    )

if __name__ == "__main__":
    main()
