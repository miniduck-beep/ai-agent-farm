from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field
from celery.result import AsyncResult
from app.tasks import celery_app
import redis
import json
from datetime import datetime
from typing import Optional

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
redis_client = redis.Redis(host='redis', port=6379, decode_responses=True)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API
class ResearchRequest(BaseModel):
    topic: str = Field(..., description="–¢–µ–º–∞ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", example="–ë–ª–æ–∫—á–µ–π–Ω –≤ –ª–æ–≥–∏—Å—Ç–∏–∫–µ")
    
class TaskResponse(BaseModel):
    task_id: str
    status: str
    message: str

class ResultResponse(BaseModel):
    task_id: str
    status: str
    progress: Optional[int] = None
    message: Optional[str] = None
    result: Optional[str] = None
    error: Optional[str] = None

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="ü§ñ AI Agent Farm API",
    description="""
    **–ú–æ—â–Ω—ã–π API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–¥–∞—á —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã CrewAI –∞–≥–µ–Ω—Ç–æ–≤.**
    
    ## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - üöÄ **–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π** —á–µ—Ä–µ–∑ Celery
    - üîç **–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞** –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏  
    - ü§ñ **–ö–æ–º–∞–Ω–¥–∞ –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤** —Å Gemini 2.5 Flash
    - üåê **VPN –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è** –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º
    - üìä **–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç—ã** —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
    
    ## Workflow:
    1. POST `/research` - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
    2. GET `/result/{task_id}` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """,
    version="1.0.0",
    contact={
        "name": "AI Farm Support",
        "email": "admin@ai-farm.local"
    }
)

@app.get("/")
async def root():
    """
    –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ —Å–∏—Å—Ç–µ–º—ã
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
        redis_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω" if redis_client.ping() else "üî¥ –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Celery
        celery_inspect = celery_app.control.inspect()
        active_tasks = celery_inspect.active()
        celery_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if active_tasks is not None else "üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        return {
            "service": "ü§ñ AI Agent Farm API",
            "version": "1.0.0",
            "status": "üöÄ –†–∞–±–æ—Ç–∞–µ—Ç",
            "components": {
                "redis": redis_status,
                "celery": celery_status,
                "api": "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
            },
            "endpoints": {
                "start_research": "POST /research",
                "get_result": "GET /result/{task_id}",
                "docs": "GET /docs"
            }
        }
    except Exception as e:
        return {
            "service": "ü§ñ AI Agent Farm API",
            "status": "‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã", 
            "error": str(e)
        }

@app.post("/research", response_model=TaskResponse, tags=["Research"])
async def start_research(request: ResearchRequest):
    """
    üöÄ **–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è**
    
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å Celery –∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –∑–∞–¥–∞—á–∏.
    –ò–ò-–∞–≥–µ–Ω—Ç—ã –Ω–∞—á–Ω—É—Ç —Ä–∞–±–æ—Ç—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.
    
    **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
    - topic: –¢–µ–º–∞ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    
    **–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:**
    - task_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏
    - status: –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å (PENDING)
    - message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–¥–∞—á–∏
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from app.tasks import run_research_crew
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ Celery
        task = run_research_crew.delay(request.topic)
        
        return TaskResponse(
            task_id=task.id,
            status="PENDING", 
            message=f"–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã '{request.topic}' –ø—Ä–∏–Ω—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ task_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=500, 
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {str(e)}"
        )

@app.get("/result/{task_id}", response_model=ResultResponse, tags=["Research"])
async def get_research_result(task_id: str):
    """
    üìä **–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è**
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –æ–Ω –≥–æ—Ç–æ–≤.
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.
    
    **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
    - task_id: ID –∑–∞–¥–∞—á–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    
    **–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:**
    - task_id: ID –∑–∞–¥–∞—á–∏
    - status: PENDING | PROGRESS | SUCCESS | FAILURE
    - progress: –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (0-100)
    - message: –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
    - result: –ì–æ—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ SUCCESS)
    - error: –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ FAILURE)
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –∏–∑ Celery
        task_result = AsyncResult(task_id, app=celery_app)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ Redis
        status_info = None
        try:
            status_data = redis_client.get(f"task-status-{task_id}")
            if status_data:
                status_info = json.loads(status_data)
        except:
            pass
        
        if task_result.ready():
            # –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            if task_result.successful():
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result = task_result.result
                if isinstance(result, str):
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ —Å—Ç—Ä–æ–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    final_result = result
                else:
                    # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON
                    final_result = json.dumps(result, ensure_ascii=False, indent=2)
                
                return ResultResponse(
                    task_id=task_id,
                    status="SUCCESS",
                    progress=100,
                    message="–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!",
                    result=final_result
                )
            else:
                # –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
                error_info = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                if hasattr(task_result, 'info') and task_result.info:
                    if isinstance(task_result.info, dict):
                        error_info = task_result.info.get('error', str(task_result.info))
                    else:
                        error_info = str(task_result.info)
                
                return ResultResponse(
                    task_id=task_id,
                    status="FAILURE", 
                    progress=0,
                    message="–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π",
                    error=error_info
                )
        else:
            # –ó–∞–¥–∞—á–∞ –µ—â—ë –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
            progress = 0
            message = "–ó–∞–¥–∞—á–∞ –≤ –æ—á–µ—Ä–µ–¥–∏, –æ–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏..."
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ Redis, –µ—Å–ª–∏ –µ—Å—Ç—å
            if status_info:
                progress = status_info.get('progress', 0)
                message = status_info.get('message', message)
                
            # –ò–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ meta Celery
            elif hasattr(task_result, 'info') and isinstance(task_result.info, dict):
                progress = task_result.info.get('current', 0)
                message = task_result.info.get('status', message)
            
            return ResultResponse(
                task_id=task_id,
                status="PROGRESS" if progress > 0 else "PENDING",
                progress=progress,
                message=message
            )
            
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {str(e)}"
        )

@app.get("/status", tags=["System"])
async def get_system_status():
    """
    üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã**
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã.
    """
    try:
        # –°—Ç–∞—Ç—É—Å Redis
        redis_status = "connected" if redis_client.ping() else "disconnected"
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏
        queue_length = redis_client.llen('celery') if redis_status == "connected" else 0
        
        # –°—Ç–∞—Ç—É—Å Celery –≤–æ—Ä–∫–µ—Ä–æ–≤
        celery_inspect = celery_app.control.inspect()
        active_tasks = celery_inspect.active()
        registered_tasks = celery_inspect.registered()
        
        celery_workers = 0
        if active_tasks:
            celery_workers = len(active_tasks.keys())
            
        return {
            "timestamp": datetime.now().isoformat(),
            "system": {
                "api": "running",
                "redis": redis_status,
                "celery_workers": celery_workers
            },
            "queue": {
                "pending_tasks": queue_length
            },
            "info": {
                "total_endpoints": len(app.routes),
                "api_version": "1.0.0"
            }
        }
        
    except Exception as e:
        return {
            "timestamp": datetime.now().isoformat(),
            "system": "error",
            "error": str(e)
        }

# –î–æ–±–∞–≤–ª—è–µ–º CORS headers –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å n8n –∏ –¥—Ä—É–≥–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
@app.middleware("http")
async def add_cors_headers(request, call_next):
    response = await call_next(request)
    response.headers["Access-Control-Allow-Origin"] = "*"
    response.headers["Access-Control-Allow-Methods"] = "GET, POST, PUT, DELETE, OPTIONS"
    response.headers["Access-Control-Allow-Headers"] = "*"
    return response

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
