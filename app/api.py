"""
AI Agent Farm - Enhanced FastAPI Application  
==========================================
Production-ready API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–º–∞–Ω–¥ –∞–≥–µ–Ω—Ç–æ–≤
"""

from fastapi import FastAPI, HTTPException, BackgroundTasks, Request
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field
from typing import Optional, Dict, Any, Literal
import logging
import uuid
from datetime import datetime
import time

from app.config import settings
from app.tasks import research_task, celery_app

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=getattr(logging, settings.log_level))
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI(
    title="AI Agent Farm",
    description="ü§ñ –ú–æ—â–Ω–∞—è –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
    version="1.0.0-beta",
    contact={
        "name": "AI Agent Farm Team", 
        "url": "https://github.com/miniduck-beep/ai-agent-farm",
        "email": "support@ai-agent-farm.dev"
    },
    license_info={
        "name": "MIT",
        "url": "https://github.com/miniduck-beep/ai-agent-farm/blob/main/LICENSE",
    }
)

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.cors_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class ResearchRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"""
    topic: str = Field(..., description="–¢–µ–º–∞ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", min_length=5, max_length=500)
    crew_type: Literal["general", "business_analysis", "seo_content", "tech_research", "financial_analysis"] = Field(
        default="general", 
        description="–¢–∏–ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –∞–≥–µ–Ω—Ç–æ–≤"
    )
    language: Literal["ru", "en"] = Field(default="ru", description="–Ø–∑—ã–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
    depth: Literal["basic", "standard", "comprehensive"] = Field(
        default="standard", 
        description="–ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞: basic (–±—ã—Å—Ç—Ä—ã–π), standard (–¥–µ—Ç–∞–ª—å–Ω—ã–π), comprehensive (–∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–∏–π)"
    )

class ResearchResponse(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    task_id: str = Field(..., description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏")
    status: str = Field(..., description="–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏")
    message: str = Field(..., description="–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
    estimated_time: str = Field(..., description="–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    created_at: datetime = Field(..., description="–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏")
    crew_info: Dict[str, Any] = Field(..., description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ –∞–≥–µ–Ω—Ç–æ–≤")

class TaskResult(BaseModel):
    """–ú–æ–¥–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    task_id: str
    status: str
    progress: int = Field(..., ge=0, le=100, description="–ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö")
    result: Optional[Dict[str, Any]] = None
    error: Optional[str] = None
    processing_time: Optional[float] = None
    created_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None

class SystemStatus(BaseModel):
    """–ú–æ–¥–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    status: str
    timestamp: datetime
    version: str
    components: Dict[str, str]
    active_tasks: int
    completed_tasks: int

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–∞—Ö –∫–æ–º–∞–Ω–¥
CREW_TYPE_INFO = {
    "general": {
        "name": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
        "description": "–ö–æ–º–∞–Ω–¥–∞ –∏–∑ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–∏—Å–∞—Ç–µ–ª—è –¥–ª—è –æ–±—â–∏—Ö –∑–∞–¥–∞—á",
        "agents": ["–°—Ç–∞—Ä—à–∏–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–∏—Å–∞—Ç–µ–ª—å"],
        "best_for": ["–û–±—â–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "–û–±–∑–æ—Ä–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã", "–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ–º—ã"]
    },
    "business_analysis": {
        "name": "–ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
        "description": "–ö–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–æ–≤ –∏ –±–∏–∑–Ω–µ—Å–∞",
        "agents": ["–ê–Ω–∞–ª–∏—Ç–∏–∫ —Ä—ã–Ω–∫–∞", "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫", "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç"],
        "best_for": ["–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞", "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è —Ä–∞–∑–≤–µ–¥–∫–∞", "–ë–∏–∑–Ω–µ—Å-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑"]
    },
    "seo_content": {
        "name": "SEO –∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥",
        "description": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º",
        "agents": ["SEO-—ç–∫—Å–ø–µ—Ä—Ç", "–ö–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—Ä–∞—Ç–µ–≥", "Digital-–º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥"],
        "best_for": ["SEO-–∞—É–¥–∏—Ç", "–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω—ã", "Digital-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", "–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —Å–∞–π—Ç–æ–≤"]
    },
    "tech_research": {
        "name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
        "description": "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π",
        "agents": ["–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å", "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä —Ä–µ—à–µ–Ω–∏–π", "DevOps –∏–Ω–∂–µ–Ω–µ—Ä"],
        "best_for": ["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–¥—ã", "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞"]
    },
    "financial_analysis": {
        "name": "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑",
        "description": "–≠–∫—Å–ø–µ—Ä—Ç—ã –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—é –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º",
        "agents": ["–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫", "–ê–Ω–∞–ª–∏—Ç–∏–∫ —Ä–∏—Å–∫–æ–≤", "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫"],
        "best_for": ["–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤", "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è"]
    }
}

# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.get("/", summary="–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
async def root():
    """–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    return {
        "status": "AI Agent Farm is running!",
        "version": "1.0.0-beta",
        "message": "ü§ñ –ú–æ—â–Ω–∞—è –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ",
        "api_docs": "/docs",
        "available_crews": list(CREW_TYPE_INFO.keys())
    }

@app.get("/health", response_model=SystemStatus, summary="–î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Celery
    try:
        # Ping Celery workers
        active_workers = celery_app.control.inspect().active() or {}
        celery_status = "healthy" if active_workers else "no_workers"
    except Exception:
        celery_status = "unhealthy"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis (—á–µ—Ä–µ–∑ Celery broker)
    try:
        celery_app.broker_connection().ensure_connection(max_retries=1)
        redis_status = "healthy"
    except Exception:
        redis_status = "unhealthy"
    
    # –ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
    try:
        inspect = celery_app.control.inspect()
        active_tasks = sum(len(tasks) for tasks in (inspect.active() or {}).values())
    except:
        active_tasks = 0
    
    overall_status = "healthy" if all([
        celery_status != "unhealthy", 
        redis_status != "unhealthy"
    ]) else "unhealthy"
    
    return SystemStatus(
        status=overall_status,
        timestamp=datetime.now(),
        version="1.0.0-beta", 
        components={
            "api": "healthy",
            "celery": celery_status,
            "redis": redis_status,
            "agents": "ready"
        },
        active_tasks=active_tasks,
        completed_tasks=0  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    )

@app.get("/crews", summary="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–∞—Ö –∫–æ–º–∞–Ω–¥")
async def get_crew_types():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–∞—Ö –∫–æ–º–∞–Ω–¥ –∞–≥–µ–Ω—Ç–æ–≤"""
    return {
        "available_crews": CREW_TYPE_INFO,
        "default": "general",
        "total": len(CREW_TYPE_INFO)
    }

@app.post("/research", response_model=ResearchResponse, summary="–ó–∞–ø—É—Å–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
async def create_research(request: ResearchRequest):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π –∞–≥–µ–Ω—Ç–æ–≤
    
    - **topic**: –¢–µ–º–∞ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    - **crew_type**: –¢–∏–ø –∫–æ–º–∞–Ω–¥—ã –∞–≥–µ–Ω—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: general)
    - **language**: –Ø–∑—ã–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (ru/en, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ru)
    - **depth**: –ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞ (basic/standard/comprehensive, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: standard)
    """
    
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∑–∞–¥–∞—á–∏
        task_id = f"research_{uuid.uuid4().hex[:12]}"
        
        logger.info(f"üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ {task_id}: {request.topic} (–∫–æ–º–∞–Ω–¥–∞: {request.crew_type})")
        
        # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ Celery
        celery_task = research_task.delay(
            topic=request.topic,
            crew_type=request.crew_type,
            language=request.language,
            depth=request.depth
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
        crew_info = CREW_TYPE_INFO.get(request.crew_type, CREW_TYPE_INFO["general"])
        
        # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        time_estimates = {
            "basic": "2-5 –º–∏–Ω—É—Ç",
            "standard": "5-10 –º–∏–Ω—É—Ç", 
            "comprehensive": "10-15 –º–∏–Ω—É—Ç"
        }
        
        response = ResearchResponse(
            task_id=celery_task.id,
            status="PENDING",
            message=f"–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ '{request.topic}' –ø—Ä–∏–Ω—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π '{crew_info['name']}'",
            estimated_time=time_estimates.get(request.depth, "5-10 –º–∏–Ω—É—Ç"),
            created_at=datetime.now(),
            crew_info=crew_info
        )
        
        logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return response
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {str(e)}")

@app.get("/result/{task_id}", response_model=TaskResult, summary="–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
async def get_result(task_id: str):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ ID –∑–∞–¥–∞—á–∏
    
    –í–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:
    - **PENDING**: –ó–∞–¥–∞—á–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
    - **PROCESSING**: –ê–≥–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º  
    - **SUCCESS**: –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    - **FAILURE**: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    """
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ Celery
        celery_result = celery_app.AsyncResult(task_id)
        
        status = celery_result.status
        progress = 0
        result_data = None
        error = None
        processing_time = None
        
        if status == "PENDING":
            progress = 0
        elif status == "PROGRESS":
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            meta = celery_result.info or {}
            progress = meta.get('current', 0)
        elif status == "SUCCESS":
            progress = 100
            result_data = celery_result.result
            processing_time = result_data.get('processing_time') if isinstance(result_data, dict) else None
        elif status == "FAILURE":
            progress = 0
            error = str(celery_result.info)
        
        return TaskResult(
            task_id=task_id,
            status=status,
            progress=progress,
            result=result_data,
            error=error,
            processing_time=processing_time,
            created_at=datetime.now(),  # –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, —Å–æ—Ö—Ä–∞–Ω—è—è —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            completed_at=datetime.now() if status == "SUCCESS" else None
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ {task_id}: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {str(e)}")

@app.delete("/task/{task_id}", summary="–û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏")
async def cancel_task(task_id: str):
    """–û—Ç–º–µ–Ω—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)"""
    
    try:
        celery_app.control.revoke(task_id, terminate=True)
        logger.info(f"üö´ –ó–∞–¥–∞—á–∞ {task_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
        return {
            "task_id": task_id,
            "status": "cancelled",
            "message": "–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏ {task_id}: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏: {str(e)}")

@app.get("/tasks", summary="–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
async def list_active_tasks():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
    
    try:
        inspect = celery_app.control.inspect()
        active_tasks = inspect.active() or {}
        scheduled_tasks = inspect.scheduled() or {}
        
        return {
            "active_tasks": active_tasks,
            "scheduled_tasks": scheduled_tasks,
            "total_active": sum(len(tasks) for tasks in active_tasks.values()),
            "total_scheduled": sum(len(tasks) for tasks in scheduled_tasks.values())
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
@app.exception_handler(404)
async def not_found_handler(request: Request, exc: HTTPException):
    return {
        "error": "Not Found",
        "message": "–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
        "available_endpoints": [
            "GET /",
            "GET /health", 
            "GET /crews",
            "POST /research",
            "GET /result/{task_id}",
            "GET /docs"
        ]
    }

@app.exception_handler(500)
async def internal_error_handler(request: Request, exc: Exception):
    logger.error(f"Internal server error: {str(exc)}")
    return {
        "error": "Internal Server Error",
        "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.",
        "timestamp": datetime.now().isoformat()
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app.api:app",
        host=settings.api_host,
        port=settings.api_port,
        reload=settings.debug,
        log_level=settings.log_level.lower()
    )

# ===============================
# üéØ SHOWCASE TEAMS API SUPPORT
# ===============================

@app.get("/showcase", 
         response_model=Dict[str, Any],
         tags=["üéØ Showcase Teams"],
         summary="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ showcase –∫–æ–º–∞–Ω–¥–∞—Ö",
         description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö showcase –∫–æ–º–∞–Ω–¥ —Å –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
async def get_showcase_teams():
    """
    üéØ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ showcase –∫–æ–º–∞–Ω–¥–∞—Ö –∞–≥–µ–Ω—Ç–æ–≤
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö:
    - SWOT-–ê–Ω–∞–ª–∏—Ç–∏–∫ - –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–∞–Ω–∏–π
    - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –†–µ—Ü–µ–Ω–∑–µ–Ω—Ç - –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤  
    - –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –°–æ–≤–µ—Ç–Ω–∏–∫ - –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ü–∏–π
    """
    try:
        from app.main_crew import get_showcase_crew_info
        showcase_info = get_showcase_crew_info()
        
        return {
            "status": "success",
            "message": "Showcase teams information",
            "showcase_teams": showcase_info,
            "total_teams": len(showcase_info),
            "usage_tips": {
                "swot_analysis": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Apple, Tesla, Microsoft)",
                "tech_review": "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π",
                "investment_advisor": "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: AAPL, TSLA, MSFT)"
            },
            "examples": {
                "swot_analysis": {
                    "topic": "Apple",
                    "crew_type": "swot_analysis",
                    "language": "ru",
                    "depth": "comprehensive"
                },
                "tech_review": {
                    "topic": "https://github.com/microsoft/vscode",
                    "crew_type": "tech_review", 
                    "language": "ru",
                    "depth": "standard"
                },
                "investment_advisor": {
                    "topic": "AAPL",
                    "crew_type": "investment_advisor",
                    "language": "ru", 
                    "depth": "comprehensive"
                }
            }
        }
    except Exception as e:
        logger.error(f"Error getting showcase info: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ showcase –∫–æ–º–∞–Ω–¥–∞—Ö"
        )

@app.post("/research/showcase",
          response_model=Dict[str, Any],
          tags=["üéØ Showcase Teams"],
          summary="–ó–∞–ø—É—Å–∫ showcase –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
          description="–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π endpoint –¥–ª—è –∑–∞–ø—É—Å–∫–∞ showcase –∫–æ–º–∞–Ω–¥ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π")
async def create_showcase_research(
    research_data: ResearchRequest,
    background_tasks: BackgroundTasks
):
    """
    üéØ –ó–∞–ø—É—Å–∫ showcase –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å enhanced –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ showcase –∫–æ–º–∞–Ω–¥—ã:
    - swot_analysis: SWOT-–∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–∞–Ω–∏–π
    - tech_review: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ—Ü–µ–Ω–∑–∏—è GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
    - investment_advisor: –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–π
    """
    try:
        from app.main_crew import get_showcase_crew_info
        showcase_crews = get_showcase_crew_info()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ showcase –∫–æ–º–∞–Ω–¥–∞
        if research_data.crew_type not in showcase_crews:
            available_crews = list(showcase_crews.keys())
            raise HTTPException(
                status_code=400,
                detail=f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø showcase –∫–æ–º–∞–Ω–¥—ã. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {available_crews}"
            )
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–º–∞–Ω–¥—ã
        crew_info = showcase_crews[research_data.crew_type]
        
        if research_data.crew_type == "swot_analysis":
            if not research_data.topic or len(research_data.topic.strip()) < 2:
                raise HTTPException(
                    status_code=400,
                    detail="–î–ª—è SWOT-–∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)"
                )
        
        elif research_data.crew_type == "tech_review":
            topic = research_data.topic.strip()
            if not (topic.startswith("https://github.com/") or topic.startswith("http://github.com/")):
                raise HTTPException(
                    status_code=400,
                    detail="–î–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —Ä–µ—Ü–µ–Ω–∑–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
                )
        
        elif research_data.crew_type == "investment_advisor":
            topic = research_data.topic.strip().upper()
            if not topic or len(topic) < 1 or len(topic) > 10:
                raise HTTPException(
                    status_code=400,
                    detail="–î–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–∫–µ—Ä –∞–∫—Ü–∏–∏ (1-10 —Å–∏–º–≤–æ–ª–æ–≤)"
                )
            # –û–±–Ω–æ–≤–ª—è–µ–º topic —Å uppercase
            research_data.topic = topic
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º
        task = research_task.delay(
            topic=research_data.topic,
            crew_type=research_data.crew_type,
            language=research_data.language,
            depth=research_data.depth
        )
        
        return {
            "task_id": task.id,
            "status": "PENDING",
            "message": f"Showcase –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ '{crew_info['name']}' –∑–∞–ø—É—â–µ–Ω–æ",
            "crew_info": crew_info,
            "topic": research_data.topic,
            "estimated_time": crew_info["estimated_time"],
            "use_cases": crew_info["use_cases"],
            "created_at": datetime.utcnow().isoformat(),
            "showcase": True
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error creating showcase research: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ showcase –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {str(e)}"
        )

@app.get("/crews/enhanced",
         response_model=Dict[str, Any], 
         tags=["üéØ Showcase Teams"],
         summary="–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥–∞—Ö",
         description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∏ showcase –∫–æ–º–∞–Ω–¥–∞—Ö")
async def get_enhanced_crews():
    """
    üéØ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö
    
    –í–∫–ª—é—á–∞–µ—Ç –∫–∞–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫ –∏ showcase –∫–æ–º–∞–Ω–¥—ã
    —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    """
    try:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        standard_crews = {
            "general": {
                "name": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
                "description": "Comprehensive –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ª—é–±—ã—Ö —Ç–µ–º",
                "estimated_time": "3-5 –º–∏–Ω—É—Ç",
                "category": "standard"
            },
            "business_analysis": {
                "name": "–ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞", 
                "description": "–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–æ–≤ –∏ –±–∏–∑–Ω–µ—Å-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π",
                "estimated_time": "5-8 –º–∏–Ω—É—Ç",
                "category": "standard"
            },
            "seo_content": {
                "name": "SEO –∫–æ–Ω—Ç–µ–Ω—Ç",
                "description": "–°–æ–∑–¥–∞–Ω–∏–µ SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", 
                "estimated_time": "4-6 –º–∏–Ω—É—Ç",
                "category": "standard"
            },
            "tech_research": {
                "name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ",
                "description": "–ì–ª—É–±–æ–∫–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
                "estimated_time": "6-10 –º–∏–Ω—É—Ç", 
                "category": "standard"
            },
            "financial_analysis": {
                "name": "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑",
                "description": "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤",
                "estimated_time": "5-8 –º–∏–Ω—É—Ç",
                "category": "standard"
            }
        }
        
        # Showcase –∫–æ–º–∞–Ω–¥—ã
        from app.main_crew import get_showcase_crew_info
        showcase_crews = get_showcase_crew_info()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫ showcase –∫–æ–º–∞–Ω–¥–∞–º
        for crew_key, crew_info in showcase_crews.items():
            crew_info["category"] = "showcase"
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
        all_crews = {**standard_crews, **showcase_crews}
        
        return {
            "status": "success",
            "available_crews": all_crews,
            "total_crews": len(all_crews),
            "categories": {
                "standard": len(standard_crews),
                "showcase": len(showcase_crews)
            },
            "default": "general",
            "recommended_for_demo": ["swot_analysis", "tech_review", "investment_advisor"],
            "new_features": ["Enhanced validation", "Specialized agents", "Industry expertise"]
        }
        
    except Exception as e:
        logger.error(f"Error getting enhanced crews: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö"
        )

print("‚úÖ API —Ä–∞—Å—à–∏—Ä–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π showcase –∫–æ–º–∞–Ω–¥")
